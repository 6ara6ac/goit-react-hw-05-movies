{"version":3,"file":"static/js/785.d9f0eeae.chunk.js","mappings":"qLA6CA,UAvCgB,WACZ,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,QAArC,eAAOG,EAAP,KAAeC,EAAf,KACOC,GAAMC,EAAAA,EAAAA,MAAND,GAuBX,OArBIE,EAAAA,EAAAA,YAAU,WACN,IACIH,EAAU,YACVI,EAAAA,EAAAA,IAAWH,GAAII,MAAK,YAAuB,IAAfC,EAAc,EAApBC,KAAMD,QACxB,GAAuB,IAAnBA,EAAQE,OAER,MADAR,EAAU,UACJ,IAAIS,MAAO,4CAErBX,EAAWQ,GACXN,EAAU,WACb,GAKJ,CAFD,MAAMU,GACFC,QAAQC,IAAIF,EACf,CACJ,GAAC,CAACT,KAKA,gCACK,YAAXF,IAAwB,SAAC,IAAD,IACb,aAAXA,GAAyBF,EAAQgB,KAAI,YAA0B,IAAxBC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,QAASd,EAAM,EAANA,GAC7C,OAAO,4BACH,wBAAKa,KACL,uBAAIC,MAFSd,EAIhB,IACO,WAAXF,IAAuB,sEAE/B,C,+LCxCKiB,EAAQ,mCAEDC,EAAgB,mCAAG,sGACNC,EAAAA,EAAAA,IAAA,kEAAqEF,IAD/D,uBACrBT,EADqB,EACrBA,KADqB,kBAErBA,GAFqB,2CAAH,qDAKhBY,EAAY,mCAAG,WAAOlB,GAAP,iFACbiB,EAAAA,EAAAA,IAAA,6CAAgDjB,EAAhD,oBAA8De,IADjD,mFAAH,sDAIZI,EAAY,mCAAG,WAAOC,GAAP,iFACbH,EAAAA,EAAAA,IAAA,4DAA+DF,EAA/D,iCAA+FK,EAA/F,oCADa,mFAAH,sDAKZC,EAAU,mCAAG,WAAOrB,GAAP,iFACXiB,EAAAA,EAAAA,IAAA,6CAAgDjB,EAAhD,4BAAsEe,EAAtE,wBADW,mFAAH,sDAKVZ,EAAU,mCAAG,WAAOH,GAAP,iFACXiB,EAAAA,EAAAA,IAAA,6CAAgDjB,EAAhD,4BAAsEe,EAAtE,wBADW,mFAAH,qD","sources":["components/Reviews/Reviews.js","services/API.js"],"sourcesContent":["import { useEffect,useState } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport { getReviews } from \"services/API\"\nimport { Spinner } from \"../Other/Spinner\"\n\n\nconst Reviews = () => {\n    const [reviews, setReviews] = useState([])\n    const [status, setStatus] = useState('idle')\n    const {id} = useParams()\n\n    useEffect(() => {\n        try{\n            setStatus('pending')\n            getReviews(id).then(({data:{results}}) => {\n                if (results.length === 0) {\n                    setStatus('reject')\n                    throw new Error (\"We don't have any reviews for this movie\");\n                }\n                setReviews(results)\n                setStatus('resolved')\n            }\n        )\n        }\n        catch(error){\n            console.log(error)\n        }\n    },[id]) \n\n\n\n\nreturn <> \n{status === 'pending' && <Spinner/>}\n{status === 'resolved' && reviews.map(({author, content, id})=>{\n            return <div key={id}>\n                <h3>{author}</h3>\n                <p>{content}</p>\n                </div>\n            })}\n        {status === 'reject' && <p>We don't have any reviews for this movie</p>}\n    </>\n}\n\n\nexport default Reviews","import axios from \"axios\"\n\nconst API_KEY='1aec7afb2309fd39902ffda599461df1'\n\nexport const getPopularMovies = async () => {\n   const { data } = await axios.get(`https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`)\n    return data;\n}\n\nexport const getMovieInfo = async (id) => {\n  return await axios.get(`https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}`)\n}\n\nexport const searchMovies = async (query) =>{\n  return await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false\n  `)\n}\n\nexport const getCredits = async (id) =>{\n  return await axios.get(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}&language=en-US\n  `)\n}\n\nexport const getReviews = async (id) =>{\n  return await axios.get(`https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US\n  `)\n}"],"names":["useState","reviews","setReviews","status","setStatus","id","useParams","useEffect","getReviews","then","results","data","length","Error","error","console","log","map","author","content","API_KEY","getPopularMovies","axios","getMovieInfo","searchMovies","query","getCredits"],"sourceRoot":""}